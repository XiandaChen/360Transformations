[Global]
;output fps
fps=24
;Names of the Section for the layout flow: [[Equirectangular, CubeMap, FlatFixed], [Equirectangular, FlatFixed]] means: from Equirectangular to CubeMap to FlatFixed AND from Equirectangular to FlatFixed
layoutFlow= [["input.mp4", "Equirectangular", "FlatFixed"], ["input.mp4", "Equirectangular", "CubeMap", "FlatFixed"]]
;if displayFinalPict is set, it will display the final picture of each flow for each input picture of the original video
displayFinalPict=false
;if not empty, a video will be recorded for each flow using the path + the file name given here (the file name will be unique per flow).
videoOutputName=output7_.mp4
;bitrate goal of the output video in kbps
videoOutputBitRate=0
;videoOutputName=
qualityOutputName =
; qualityToComputeList = ["MS-SSIM", "SSIM", "PSNR", "S-PSNR-NN", "S-PSNR-I", "WS-PSNR"]
qualityToComputeList = []
;["S-PSNR-NN", "S-PSNR-I"]
nbFrames= 5
startFrame= 0


[Equirectangular]
;type of the layout: equirectangular is the state-of-the-art equirectangular layout
type=equirectangular
upscale=false
;Width of the reference equirectangular video
refWidth=3840
;Width of the reference equirectangular video
refHeight=2048
;yaw, pitch, roll of the center point of the equirectangular video (in degree)
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
;if true, the resolution of the layout is compute based on the resolution of the previous layout (or on the resolution of the reference equirectangular video)
relativeResolution=true
;if relativeResolution=true ratio of the output layout width compare to the reference video; otherwise width size of the output video in pixel number
width=1
height=1
;bitrate ratio of the output video relative to the videoOutputBitRate (if it is the final layout and if the video is encoded).
bitrate=1

[Offset]
vectorSpaceTransformationType=offsetTrans
offsetRatio=0.6
;emphDirection type can be: vectorCart, vectorSpherical or rotation (if emphDirection does not exist, will be centered on the layout center)
;emphDirection={"type":"vectorCart", "x": 1, "y":0, "z":0}
;emphDirection={"type":"vectorSpherical", "rho": 1, "theta":-90, "phi":90}
;emphDirection={"type":"rotation", "rotation":{"type":"euler", "yaw":-90.0, "pitch":0.0, "roll":0.0}}


[EquirectangularOffset]
;type of the layout: equirectangular is the state-of-the-art equirectangular layout
type=equirectangular
upscale=false
;Width of the reference equirectangular video
refWidth=3840
;Width of the reference equirectangular video
refHeight=2048
;yaw, pitch, roll of the center point of the equirectangular video (in degree)
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
;if true, the resolution of the layout is compute based on the resolution of the previous layout (or on the resolution of the reference equirectangular video)
relativeResolution=true
;if relativeResolution=true ratio of the output layout width compare to the reference video; otherwise width size of the output video in pixel number
width=1
height=1
;bitrate ratio of the output video relative to the videoOutputBitRate (if it is the final layout and if the video is encoded).
bitrate=1
vectorSpaceTransformation=Offset

[CubeMap]
;type of the layout: cube map layout
type=cubeMap2
;Size of the reference input equirectangular video
refWidth=3840
refHeight=2048
;use relative resolution for the face resolutions
relativeResolution=true
;yaw, pitch and roll of the center of the Front face (in degree)
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
; rotation= {"type":"angleAxis", "angle":0, "x":0.0, "y":0, "z":1}
; rotation= {"type":"quaternion", "w":1, "x":0.0, "y":0.0, "z":0.0}
;the edge of each face. If relativeResolution, ratio compared to the reference input video, otherwise size in pixel.
cubeEdgeLengthFront=1
cubeEdgeLengthLeft=1
cubeEdgeLengthRight=1
cubeEdgeLengthTop=1
cubeEdgeLengthBottom=1
cubeEdgeLengthBack=1
;if useTile is set to true, each face will be encoded into an independent video with a target bitrate set by the bitrateFront, bitrateLeft, etc. parameters
;if useTile is set to false, the whole projection will be encoded into a unique video (all faces on the same frame) and a global bitrate target set by the bitrate parameter
useTile=false
;Relative bitrate of each face (if final layout encoded). A ratio r means r*videoOutputBitRate/6
bitrateFront=1
bitrateLeft=1
bitrateRight=1
bitrateTop=1
bitrateBottom=1
bitrateBack=1
;bitrate is used only if useTile=false. A ratio r means a bitrate of r*videoOutputBitRate
bitrate=1
vectorSpaceTransformation=Offset

[FlatFixed]
;type of the layout: flatFixed means FoV extraction
type=flatFixed
;relativeResolution cannot be true for flatFixed layout
relativeResolution=false
;indicates if we want to use a static position set by the yaw, pitch and roll parameter or play a traces located at positionTrace
dynamicPositions=false
;The path to the position trace file. Used if dynamicPositions is set to true
positionTrace=pathToPositionTrace
;yaw, pitch, roll of the center point of the FoV (in degree). Used if dynamicPositions is set to false
; rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
rotation= {"type":"angleAxis", "angle":90, "x":0.0, "y":0, "z":1}
;width and height in pixels of the output image
width=1920
height=1080
;Horizontal angle of the display device (in degree)
horizontalAngleOfVision=110
;Vertical angle of the display device (in degree)
verticalAngleOfVision=90
