[Global]
;output fps
fps=24
;Names of the Section for the layout flow: [[Equirectangular, CubeMap, FlatFixed], [Equirectangular, FlatFixed]] means: from Equirectangular to CubeMap to FlatFixed AND from Equirectangular to FlatFixed
layoutFlow= [["input.mp4", "Equirectangular"], ["input.mp4", "Equirectangular", "CubeMap"], ["input.mp4", "Equirectangular", "Pyramid"], ["input.mp4", "Equirectangular", "PyramidCompact"], ["input.mp4", "Equirectangular", "RhombicDodeca"], ["input.mp4", "Equirectangular", "EquirectangularTiled"]]
;if displayFinalPict is set, it will display the final picture of each flow for each input picture of the original video
displayFinalPict=false
;if not empty, a video will be recorded for each flow using the path + the file name given here (the file name will be unique per flow).
videoOutputName=output4_.mkv
;bitrate goal of the output video in kbps
videoOutputBitRate=0
;videoOutputName=
qualityOutputName =
; qualityToComputeList = ["MS-SSIM", "SSIM", "PSNR", "S-PSNR-NN", "S-PSNR-I", "WS-PSNR"]
qualityToComputeList = []
;["S-PSNR-NN", "S-PSNR-I"]
nbFrames= 5
startFrame= 0


[Equirectangular]
;type of the layout: equirectangular is the state-of-the-art equirectangular layout
type=equirectangular
upscale=false
;Width of the reference equirectangular video
refWidth=3840
;Width of the reference equirectangular video
refHeight=2048
;yaw, pitch, roll of the center point of the equirectangular video (in degree)
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
;if true, the resolution of the layout is compute based on the resolution of the previous layout (or on the resolution of the reference equirectangular video)
relativeResolution=true
;if relativeResolution=true ratio of the output layout width compare to the reference video; otherwise width size of the output video in pixel number
width=1
height=1
;bitrate ratio of the output video relative to the videoOutputBitRate (if it is the final layout and if the video is encoded).
bitrate=1

[CubeMap]
;type of the layout: cube map layout
type=cubeMap
;Size of the reference input equirectangular video
refWidth=3840
refHeight=2048
;use relative resolution for the face resolutions
relativeResolution=true
;yaw, pitch and roll of the center of the Front face (in degree)
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
; rotation= {"type":"angleAxis", "angle":0, "x":0.0, "y":0, "z":1}
; rotation= {"type":"quaternion", "w":1, "x":0.0, "y":0.0, "z":0.0}
;the edge of each face. If relativeResolution, ratio compared to the reference input video, otherwise size in pixel.
cubeEdgeLengthFront=1
cubeEdgeLengthLeft=1
cubeEdgeLengthRight=1
cubeEdgeLengthTop=1
cubeEdgeLengthBottom=1
cubeEdgeLengthBack=1
;if useTile is set to true, each face will be encoded into an independent video with a target bitrate set by the bitrateFront, bitrateLeft, etc. parameters
;if useTile is set to false, the whole projection will be encoded into a unique video (all faces on the same frame) and a global bitrate target set by the bitrate parameter
useTile=false
;Relative bitrate of each face (if final layout encoded). A ratio r means r*videoOutputBitRate/6
bitrateFront=1
bitrateLeft=1
bitrateRight=1
bitrateTop=1
bitrateBottom=1
bitrateBack=1
;bitrate is used only if useTile=false. A ratio r means a bitrate of r*videoOutputBitRate
bitrate=1

[EquirectangularTiled]
type=equirectangularTiled
;Size of the reference input equirectangular video
refWidth=3840
refHeight=2048
;use relative resolution for the face resolutions
relativeResolution=true
;yaw, pitch, roll of the center of face 4x3 (in degree)
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
;nbHTiles (resp. nbVTiles) indicate the number of horizontal (resp. vertical) tiles
;You have to compile the software with the RANGE_NB_H_TILES and RANGE_NB_V_TILES macro to be able to use this layout.
;For instance in this example the value 8 should be in the macro RANGE_NB_H_TILES and RANGE_NB_V_TILES otherwise a runtime error will be raised
nbHTiles=8
nbVTiles=8
;hTileRation_X and vTileRation_X indicate the relative horizontal and vertical ratio of the tile X. In this example each tile get 1/8 of the equirectangular picture
hTileRation_0=0.1
hTileRation_1=0.2
hTileRation_2=0.25
hTileRation_3=0.25
hTileRation_4=0.25
hTileRation_5=0.25
hTileRation_6=0.2
hTileRation_7=0.1
vTileRation_0=0.1
vTileRation_1=0.2
vTileRation_2=0.25
vTileRation_3=0.25
vTileRation_4=0.25
vTileRation_5=0.25
vTileRation_6=0.2
vTileRation_7=0.1
;if upscale is set to true, all the tiles will be upscaled to the original tile resolution
upscale=false
;if useTile is set to true, each face will be encoded into an independent video with a target bitrate set by the equirectangularTileBitrate_0_0, equirectangularTileBitrate_0_1, etc. parameters
;if useTile is set to false, the whole projection will be encoded into a unique video (all faces on the same frame) and a global bitrate target set by the bitrate parameter
useTile=false
;resolution of the tile (i,j)=(0,0)
equirectangularTile_0_0=0.25
; bitrate of the tile (i,j) = (0,0). Ratio of r means r*videoOutputBitRate/64
equirectangularTileBitrate_0_0=0.25
equirectangularTile_0_1=0.25
equirectangularTileBitrate_0_1=0.25
equirectangularTile_0_2=0.25
equirectangularTileBitrate_0_2=0.25
equirectangularTile_0_3=0.25
equirectangularTileBitrate_0_3=0.25
equirectangularTile_0_4=0.25
equirectangularTileBitrate_0_4=0.25
equirectangularTile_0_5=0.25
equirectangularTileBitrate_0_5=0.25
equirectangularTile_0_6=0.25
equirectangularTileBitrate_0_6=0.25
equirectangularTile_0_7=0.25
equirectangularTileBitrate_0_7=0.25
equirectangularTile_1_0=0.25
equirectangularTileBitrate_1_0=0.25
equirectangularTile_1_1=0.5
equirectangularTileBitrate_1_1=0.25
equirectangularTile_1_2=0.5
equirectangularTileBitrate_1_2=0.25
equirectangularTile_1_3=0.5
equirectangularTileBitrate_1_3=0.25
equirectangularTile_1_4=0.5
equirectangularTileBitrate_1_4=0.25
equirectangularTile_1_5=0.5
equirectangularTileBitrate_1_5=0.25
equirectangularTile_1_6=0.5
equirectangularTileBitrate_1_6=0.25
equirectangularTile_1_7=0.25
equirectangularTileBitrate_1_7=0.25
equirectangularTile_2_0=0.25
equirectangularTileBitrate_2_0=0.25
equirectangularTile_2_1=0.5
equirectangularTileBitrate_2_1=1
equirectangularTile_2_2=0.75
equirectangularTileBitrate_2_2=1
equirectangularTile_2_3=0.75
equirectangularTileBitrate_2_3=1
equirectangularTile_2_4=0.75
equirectangularTileBitrate_2_4=1
equirectangularTile_2_5=0.75
equirectangularTileBitrate_2_5=1
equirectangularTile_2_6=0.5
equirectangularTileBitrate_2_6=0.25
equirectangularTile_2_7=0.25
equirectangularTileBitrate_2_7=0.25
equirectangularTile_3_0=0.25
equirectangularTileBitrate_3_0=0.25
equirectangularTile_3_1=0.5
equirectangularTileBitrate_3_1=1
equirectangularTile_3_2=0.75
equirectangularTileBitrate_3_2=1
equirectangularTile_3_3=1
equirectangularTileBitrate_3_3=1
equirectangularTile_3_4=1
equirectangularTileBitrate_3_4=1
equirectangularTile_3_5=0.75
equirectangularTileBitrate_3_5=1
equirectangularTile_3_6=0.5
equirectangularTileBitrate_3_6=0.25
equirectangularTile_3_7=0.25
equirectangularTileBitrate_3_7=0.25
equirectangularTile_4_0=0.25
equirectangularTileBitrate_4_0=0.25
equirectangularTile_4_1=0.5
equirectangularTileBitrate_4_1=1
equirectangularTile_4_2=0.75
equirectangularTileBitrate_4_2=1
equirectangularTile_4_3=1
equirectangularTileBitrate_4_3=1
equirectangularTile_4_4=1
equirectangularTileBitrate_4_4=1
equirectangularTile_4_5=0.75
equirectangularTileBitrate_4_5=1
equirectangularTile_4_6=0.5
equirectangularTileBitrate_4_6=0.25
equirectangularTile_4_7=0.25
equirectangularTileBitrate_4_7=0.25
equirectangularTile_5_0=0.25
equirectangularTileBitrate_5_0=0.25
equirectangularTile_5_1=0.5
equirectangularTileBitrate_5_1=1
equirectangularTile_5_2=0.75
equirectangularTileBitrate_5_2=1
equirectangularTile_5_3=0.75
equirectangularTileBitrate_5_3=1
equirectangularTile_5_4=0.75
equirectangularTileBitrate_5_4=1
equirectangularTile_5_5=0.75
equirectangularTileBitrate_5_5=1
equirectangularTile_5_6=0.5
equirectangularTileBitrate_5_6=0.25
equirectangularTile_5_7=0.25
equirectangularTileBitrate_5_7=0.25
equirectangularTile_6_0=0.25
equirectangularTileBitrate_6_0=0.25
equirectangularTile_6_1=0.5
equirectangularTileBitrate_6_1=1
equirectangularTile_6_2=0.5
equirectangularTileBitrate_6_2=1
equirectangularTile_6_3=0.5
equirectangularTileBitrate_6_3=1
equirectangularTile_6_4=0.5
equirectangularTileBitrate_6_4=1
equirectangularTile_6_5=0.5
equirectangularTileBitrate_6_5=1
equirectangularTile_6_6=0.5
equirectangularTileBitrate_6_6=0.25
equirectangularTile_6_7=0.25
equirectangularTileBitrate_6_7=0.25
equirectangularTile_7_0=0.25
equirectangularTileBitrate_7_0=0.25
equirectangularTile_7_1=0.25
equirectangularTileBitrate_7_1=0.25
equirectangularTile_7_2=0.25
equirectangularTileBitrate_7_2=0.25
equirectangularTile_7_3=0.25
equirectangularTileBitrate_7_3=0.25
equirectangularTile_7_4=0.25
equirectangularTileBitrate_7_4=0.25
equirectangularTile_7_5=0.25
equirectangularTileBitrate_7_5=0.25
equirectangularTile_7_6=0.25
equirectangularTileBitrate_7_6=0.25
equirectangularTile_7_7=0.25
equirectangularTileBitrate_7_7=0.25
;bitrate is used only if useTile=false. A ratio r means a bitrate of r*videoOutputBitRate
bitrate=1

[Pyramid]
;type of the layout: pyramid map layout
type=pyramid2
;Size of the reference input equirectangular video
refWidth=3840
refHeight=2048
;use relative resolution for the face resolutions
relativeResolution=true
;Size of the Base face in the 3D space (the circumscribed sphere have a radius of 1). Should be strictly higher than 2.
pyramidBaseEdge=2.5
;The rotation used to get the center of the front face: type = "euler" or "quaternion" or "angleAxis".
; if type is "euler" you have to give the yaw, pitch and roll angle in degree
; if type is "quaternion" you have to give the w, x, y, z value of the quaternion that represente the rotation. A normalization is performed by the software.
; if type is "angleAxis" you have to give an "angle" in degree and a direction vector x, y, z that generates the rotation axis (this vector should not be (0, 0, 0)).
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
;rotation= {"type":"quaternion", "w":1.0, "x":0.0, "y":0.0, "z":0.0}
;rotation= {"type":"angleAxis", "angle":90, "x":0, "y":0, "z":1}
;the edge of each face. If relativeResolution, ratio compared to the reference input video, otherwise size in pixel.
pyramidBaseEdgeLength=1
pyramidHeightLeft=1
pyramidHeightRight=1
pyramidHeightTop=1
pyramidHeightBottom=1
;if useTile is set to true, each face will be encoded into an independent video with a target bitrate set by the pyramidBaseBitrate, pyramidLeftBitrate, etc. parameters
;if useTile is set to false, the whole projection will be encoded into a unique video (all faces on the same frame) and a global bitrate target set by the bitrate parameter
useTile=false
;Relative bitrate of each face (if final layout encoded). A ratio r means r*videoOutputBitRate/5
pyramidBaseBitrate=1
pyramidLeftBitrate=0.25
pyramidRightBitrate=0.25
pyramidTopBitrate=0.25
pyramidBottomBitrate=0.25
;bitrate is used only if useTile=false. A ratio r means a bitrate of r*videoOutputBitRate
bitrate=1

[PyramidCompact]
;type of the layout: pyramid map layout
type=pyramid
;Size of the reference input equirectangular video
refWidth=3840
refHeight=2048
;use relative resolution for the face resolutions
relativeResolution=true
;Size of the Base face in the 3D space (the circumscribed sphere have a radius of 1). Should be strictly higher than 2.
pyramidBaseEdge=2.5
;The rotation used to get the center of the front face: type = "euler" or "quaternion" or "angleAxis".
; if type is "euler" you have to give the yaw, pitch and roll angle in degree
; if type is "quaternion" you have to give the w, x, y, z value of the quaternion that represente the rotation. A normalization is performed by the software.
; if type is "angleAxis" you have to give an "angle" in degree and a direction vector x, y, z that generates the rotation axis (this vector should not be (0, 0, 0)).
rotation= {"type":"euler", "yaw":0.0, "pitch":0.0, "roll":0.0}
;rotation= {"type":"quaternion", "w":1.0, "x":0.0, "y":0.0, "z":0.0}
;rotation= {"type":"angleAxis", "angle":90, "x":0, "y":0, "z":1}
;the edge of each face. If relativeResolution, ratio compared to the reference input video, otherwise size in pixel.
pyramidBaseEdgeLength=1
pyramidHeightLeft=1
pyramidHeightRight=1
pyramidHeightTop=1
pyramidHeightBottom=1
;if useTile is set to true, each face will be encoded into an independent video with a target bitrate set by the pyramidBaseBitrate, pyramidLeftBitrate, etc. parameters
;if useTile is set to false, the whole projection will be encoded into a unique video (all faces on the same frame) and a global bitrate target set by the bitrate parameter
useTile=false
;Relative bitrate of each face (if final layout encoded). A ratio r means r*videoOutputBitRate/5
pyramidBaseBitrate=1
pyramidLeftBitrate=0.25
pyramidRightBitrate=0.25
pyramidTopBitrate=0.25
pyramidBottomBitrate=0.25
;bitrate is used only if useTile=false. A ratio r means a bitrate of r*videoOutputBitRate
bitrate=1

[RhombicDodeca]
;type of the layout: rhombicDodeca
type=rhombicDodeca
;Size of the reference input equirectangular video
refWidth=3840
refHeight=2048
;use relative resolution for the face resolutions
relativeResolution=true
;The rotation used to get the center of the front face: type = "euler" or "quaternion" or "angleAxis".
; if type is "euler" you have to give the yaw, pitch and roll angle in degree
; if type is "quaternion" you have to give the w, x, y, z value of the quaternion that represente the rotation. A normalization is performed by the software.
; if type is "angleAxis" you have to give an "angle" in degree and a direction vector x, y, z that generates the rotation axis (this vector should not be (0, 0, 0)).
rotation= {"type":"euler", "yaw":0, "pitch":0, "roll":0.0}
;rotation= {"type":"quaternion", "w":0.16457888628862896, "x":0.2264437924852498, "y":0.03885174449037981, "z":0.9592327876917812}
;rotation= {"type":"angleAxis", "angle":161,05451359158116, "x":-0,22957428492645424, "y":-0,03938885390335991, "z":-0,9724937870694532}
;the length of each face. If relativeResolution, ratio compared to the reference input video, otherwise size in pixel.
rhombEdgeLengthFace1=1
rhombEdgeLengthFace2=1
rhombEdgeLengthFace3=1
rhombEdgeLengthFace4=1
rhombEdgeLengthFace5=1
rhombEdgeLengthFace6=1
rhombEdgeLengthFace7=1
rhombEdgeLengthFace8=1
rhombEdgeLengthFace9=1
rhombEdgeLengthFace10=1
rhombEdgeLengthFace11=1
rhombEdgeLengthFace12=1
;if useTile is set to true, each face will be encoded into an independent video with a target bitrate set by the rhombFace1Bitrate, rhombFace2Bitrate, etc. parameters
;if useTile is set to false, the whole projection will be encoded into a unique video (all faces on the same frame) and a global bitrate target set by the bitrate parameter
useTile=false
;Relative bitrate of each face (if final layout encoded). A ratio r means r*videoOutputBitRate/12
rhombFace1Bitrate=1
rhombFace5Bitrate=1
rhombFace2Bitrate=1
rhombFace3Bitrate=1
rhombFace4Bitrate=1
rhombFace6Bitrate=1
rhombFace7Bitrate=1
rhombFace8Bitrate=1
rhombFace10Bitrate=1
rhombFace11Bitrate=1
rhombFace9Bitrate=1
rhombFace12Bitrate=1
;bitrate is used only if useTile=false. A ratio r means a bitrate of r*videoOutputBitRate
bitrate=1
